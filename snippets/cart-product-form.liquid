{%- liquid
	assign gwp_title = settings.gwp_title
	assign variant_ids = settings.gwp_variant_id | split: ', '
	assign addtl_variant_ids = settings.gwp_additional_variant_id | split: ', '
	assign gwp_limit = settings.gwp_limit
	assign qualified_for_addtl = false
	assign product = all_products[settings.gwp_product]
    
    for variant in product.variants
  		if variant.inventory_quantity > 0
    		assign gwps_qty = gwps_qty | plus: variant.inventory_quantity
  		endif
	endfor
-%}

{%- if gwps_qty > 0 -%}
{{ 'cart-product-form-style.css' | asset_url | stylesheet_tag }}
<div id="modal-gwp" class="ah-modal modal modal--square text-center" display: none;>
  <div class="modal__inner">
    <div class="modal__centered">
      	<div class="modal__centered-content">
          <div class="modal-content">
            <div class="modal-inner">    
              <div class="gwp-close">
              <span class="close" onclick="cancelGwp();">&times;</span>
              </div>              
              <h4 class="text-center gwp-title {{qualified_for_addtl}}">{{ gwp_title }}</h4>
              {%- if qualified_for_addtl -%}
              <small class="gwp-subtitle">{{ settings.gwp_additional_note }}</small>
              {%- endif -%}	
              {%- if settings.gwp_limit > 1 -%}<small class="gwp-subtitle">{{ 'cart.gwp.note_html' | t: limit: settings.gwp_limit }}</small>{%- endif -%}
              <img class="lazyload gwp-image"
                   data-src="{{ product.featured_image | img_url: '260x' }}"
                   data-widths="[260]"
                   data-aspectratio="{{ product.featured_image.aspect_ratio }}"
                   data-sizes="auto"
                   alt="{{ product.featured_image.alt | escape }}">
              <noscript>
                <img class="lazyloaded" src="{{ product.featured_image | img_url: 'medium' }}" alt="{{ product.featured_image.alt | escape }}">
              </noscript>
              
              {%- if settings.gwp_automatic == false -%}
              <div class="gwp-flex">
              <select class="choose-gwp" id="regular-gwp">
              {% for variant in product.variants %}
                  {% if settings.gwp_variant_id contains variant.id %}
                  {% if variant.available %}
                      <option value="{{ variant.id }}" data-name="{{ variant.title }}" data-type="regular" data-image="{{ variant.featured_image | img_url: '260x' }}">{{ variant.title }}</option>
                  {% else %}
                      <option disabled="disabled" data-type="regular">{{ variant.title }} - {{ 'products.product.sold_out' | t }}
                  {% endif %}
                  {% endif %}
              {% endfor %}
              </select>              

              <button name="add" type="button" class="select-gwp" style="display: none;">{{ 'cart.gwp.select' | t }}</button>
              </div>
              {%- if settings.gwp_limit > 1 -%}
              <small class="width-100p center margin-top-15 limit-holder">You can still select <span class="limit-text"><strong>{{ gwp_limit }}</strong></span> more. </small>
              {%- endif -%}
              <div class="gwp-selected-container">
                <h5 class="center margin-top-15 width-100p selected-freebies" style="display:none;">{{ 'cart.gwp.freebies' | t }}</h5>
                <div class="gwp-selected"></div>
              </div>
              {%- endif -%}
              
              <button name="add" type="submit" class="btn collect-button cart-modal-close width-100p" {%- if settings.gwp_limit > 1 -%}style="display: none;" {%- endif -%}>Collect</button>
            </div>
          </div>
      </div>
    </div>
  </div>
</div>

<script>
var all_gwp = [], all_addtl_gwp = [], all_items = [], params_text = '', curr = 0, limit = {{ settings.gwp_limit }}, in_cart = [], items_update = [];
  
sessionStorage.setItem('limit', limit);
  
document.addEventListener('page:loaded', function() {
  	{%- for gwp in variant_ids -%}
        all_gwp.push({{ gwp }});
  		sessionStorage.removeItem({{ gwp }}); 
    {%- endfor -%}
    
    {%- for gwp in addtl_variant_ids -%}
        all_addtl_gwp.push({{ gwp }});
  		sessionStorage.removeItem({{ gwp }}); 
    {%- endfor -%}

  	checkQualification();  
    {%- unless settings.gwp_limit == 1 -%}
    document.querySelector('.limit-text').innerHTML = sessionStorage.getItem('limit');
    document.querySelector('.select-gwp').setAttribute('data-id', $('.choose-gwp option:selected').val());
    document.querySelector('.select-gwp').setAttribute('data-name', $('.choose-gwp option:selected').attr('data-name'));
    document.querySelector('.select-gwp').setAttribute('data-type',$('.choose-gwp option:selected').attr('data-type'));
  
  	document.querySelector('.choose-gwp').addEventListener('change', chooseGwp, this);
  	document.querySelector('.select-gwp').addEventListener('click', selectGwp, this);
  	{%- endunless -%}
  
  	document.querySelector('.cart-modal-close').addEventListener('click', cancelGwp);
  	document.querySelector('.collect-button').addEventListener('click', collectGwp);
});
  
function checkQualification() {
{%- assign add_cart = false -%}
{%- assign wrap_count = 0 -%}
{%- assign itemPrice = cart.checkout_charge_amount -%}

{%- for item in cart.items -%}
{%- assign wrap_count  = wrap_count | plus: item.quantity  -%}

{% if settings.gwp_minimum == 0 %}
  {%- if wrap_count >= settings.gwp_min_count and settings.gwp_tag_exclusive == 'ALL' or  item.product.tags contains settings.gwp_tag_exclusive -%}
  {%- assign add_cart = true -%}
  {%- endif -%}
{%- endif -%}
{%- if settings.gwp_minimum > 0 -%}
  {%- if itemPrice >= settings.gwp_minimum and settings.gwp_tag_exclusive == 'ALL' or  item.product.tags contains settings.gwp_tag_exclusive -%}
  {%- assign add_cart = true -%}
  {%- endif -%}
{%- endif -%}
{%- endfor -%}

{%- if settings.gwp_additional and itemPrice >= settings.minimum_additional_required -%}
{%- for variant in product.variants -%}
	{%- if settings.gwp_additional_variant_id contains variant.id and variant.available -%}
		{%- assign qualified_for_addtl = true -%}
	{%- endif -%}
{%- endfor -%}
{%- endif -%}

{%- if settings.gwp_additional and qualified_for_addtl  -%}
{%- assign gwp_limit = settings.gwp_limit | plus: 1 -%}
{%- endif -%}
  
{%- if add_cart -%}
setNewLimit({{ itemPrice }});
{%- else -%}
var gwp_items = [], update_cart = '';
{% for item in cart.items %}
{%- if settings.gwp_variant_id contains item.id  or settings.gwp_additional_variant_id contains item.id  -%}
	gwp_items.push({{ item.id }});
{%- endif -%}
{%- endfor -%}
	gwp_items = gwp_items.filter(uniqueArray);
	for (var key in gwp_items) {
		update_cart += "updates[" + gwp_items[key] + "]=0&"; 
	}
	update_cart = update_cart.slice(0,-1);
	if ({{ cart.item_count }} > 0 && gwp_items.length > 0) {
        const promise = new Promise((resolve, reject) => {
        jQuery.post('/cart/update.js', update_cart);
           let wait = setTimeout(() => {
              resolve('Success');
           }, 500);
        });

        promise.then((value) => {
          document.dispatchEvent(new CustomEvent('cart:build'));
          window.location.reload();
        });      
	}
{%- endif -%}
}
  
function uniqueArray(arr, index, self) {
  return self.indexOf(arr) === index;
}

function setNewLimit(subtotal) {
  var cartUpdates =[], params_text = '', addtls = 0;
  {% for item in cart.items %}
  {% if settings.gwp_variant_id contains item.id or settings.gwp_additional_variant_id contains item.id  %}
  	in_cart.push({{ item.id }});
  {% if settings.gwp_variant_id contains item.id %}
    curr += parseInt(document.querySelector('.js-qty__num[data-id="{{ item.key }}"]').value);
  {% endif %}
  {% if settings.gwp_additional_variant_id contains item.id %}
    addtls += parseInt(document.querySelector('.js-qty__num[data-id="{{ item.key }}"]').value);
  {% endif %}                                   
  {% endif %}
  {% endfor %}                                            
  
  {%- if settings.gwp_limit > 1 -%} document.querySelector('.select-gwp').style.display = 'block'; {%- endif -%}                
   if ((subtotal < {{ settings.gwp_minimum }} || curr == {%- if qualified_for_addtl -%} {{ gwp_limit }} {%- else -%} {{ settings.gwp_limit }} {%- endif -%}) && addtls == 0) {
   	cancelGwp();
    sessionStorage.setItem('limit', 0);
  }
  {% if settings.gwp_additional %}
  else { 
    if (subtotal >= {{ settings.gwp_minimum }} && curr <  {{ settings.gwp_limit }}) {
        curr = {{ settings.gwp_limit }} - curr;
        sessionStorage.setItem('limit', curr);
    	showModal(curr);
    } 
    else if (subtotal >= {{ settings.gwp_minimum }} && subtotal >= {{ settings.minimum_additional_required }} && addtls == 0) {
      	var addtl_update = [], addtl_ajax = [];
      	{%- for gwp in addtl_variant_ids -%}
          	addtl_update.push({{ gwp }});
  			sessionStorage.setItem({{ gwp }}, 1);
  		{%- endfor -%}
      	for (var key in addtl_update) {
          addtl_ajax[key] = {
            id: addtl_update[key],
            quantity: parseInt(sessionStorage.getItem(addtl_update[key]))
          }
        }
        var n = { addtl_ajax };
        fetch(theme.routes.cartAdd, {
            method: "POST",
            body: JSON.stringify(n),
            credentials: "same-origin",
            headers: {
                "Content-Type": "application/json"
            }
        }).then(e => e.json()).then(function(e) {
                if (422 === e.status || "bad_request" === e.status)
                ;
                else {
                    var n = e;
                    document.dispatchEvent(new CustomEvent("ajaxProduct:added", {
                        detail: {
                            product: n
                        }
                    }))
                }
                document.dispatchEvent(new CustomEvent('cart:build'));
            }
      .bind(this));
    } 
    if (subtotal < {{ settings.minimum_additional_required }} && addtls > 0) {
      {%- for gwp in addtl_variant_ids -%}
      params_text += "updates[{{ settings.gwp_additional_variant_id }}]=0&";
      {%- endfor -%}
      const promise = new Promise((resolve, reject) => {
         jQuery.post('/cart/update.js', params_text);
         let wait = setTimeout(() => {
            resolve('Success');
         }, 500);
      });

      promise.then((value) => {
          document.dispatchEvent(new CustomEvent('cart:build'));
      });      
  	}
  }
  {% else %}
  else if (subtotal >= {{ settings.gwp_minimum }} && curr < {{ settings.gwp_limit }} && curr > 0) {
     	curr = {{ settings.gwp_limit }} - curr;
        sessionStorage.setItem('limit', curr);
    	showModal(curr);
  } else if (subtotal >= {{ settings.gwp_minimum }} && curr == 0) {
    	showModal();
  }
  {%- endif -%}
}

function collectGwp() {
  	var items = [];
	cancelGwp();

  	{%- if settings.gwp_automatic -%}
        {%- if qualified_for_addtl -%}
  			items[0] = { id: {{ settings.gwp_variant_id }}, quantity: 1 };
  			if (in_cart.indexOf({{ settings.gwp_additional_variant_id }}) == -1) {
      		items[1] = { id: {{ settings.gwp_additional_variant_id }}, quantity: 1};
            }
  		{%- else -%}
            {%- if settings.gwp_limit == 1 -%}
            items[0] = { id: {{ settings.gwp_variant_id }}, quantity: 1  };
            {%- endif -%}
  		{%- endif -%}
  	{%- else -%}
  	{%- if qualified_for_addtl -%}
  		{%- if settings.gwp_limit == 1 -%}
            sessionStorage.setItem(parseInt(document.getElementById('regular-gwp').value), 1);
            items_update.push(parseInt(document.getElementById('regular-gwp').value));
        {%- else -%}
  		{%- for gwp in variant_ids -%}
  		if (sessionStorage.getItem({{ gwp }}) != null) {
          	items_update.push({{ gwp }});
        }
  		{%- endfor -%}
  		{%- endif -%}
        {%- for gwp in addtl_variant_ids -%}
  		if (sessionStorage.getItem({{ gwp }}) == null && in_cart.indexOf({{ gwp }}) == -1) {
          	items_update.push({{ gwp }});
  			sessionStorage.setItem({{ gwp }}, 1);
		}
  		{%- endfor -%}
    {%- else -%}
  	{%- if settings.gwp_limit == 1 -%}
  		 sessionStorage.setItem(parseInt(document.getElementById('regular-gwp').value), 1);
         items_update.push(parseInt(document.getElementById('regular-gwp').value));
  	{%- else -%}
  		{%- for gwp in variant_ids -%}
  		if (sessionStorage.getItem({{ gwp }}) != null) {
          	items_update.push({{ gwp }});
        }
  		{%- endfor -%}
  	{%- endif -%}
    {%- endif -%}
  	for (var key in items_update) {
      items[key] = {
        id: items_update[key],
        quantity: parseInt(sessionStorage.getItem(items_update[key]))
      }          
    }  
  	{%- endif -%}
    var n = { items };
    fetch(theme.routes.cartAdd, {
        method: "POST",
        body: JSON.stringify(n),
        credentials: "same-origin",
        headers: {
            "Content-Type": "application/json"
        }
    }).then(e => e.json()).then(function(e) {
            if (422 === e.status || "bad_request" === e.status)
            ;
            else {
                var n = e;
                document.dispatchEvent(new CustomEvent("ajaxProduct:added", {
                    detail: {
                        product: n
                    }
                }))
            }
            document.dispatchEvent(new CustomEvent('cart:build'));
        }
  .bind(this)); 
}
  
function render_items(id, name, type, gwpType) {
   	document.querySelector('.selected-freebies').style.display = 'block';
   	var qty = sessionStorage.getItem(id), html = '';
      
  	html = '<p class="width-100p selected-gwp-data center" data-type="'+ gwpType +'" data-id="'+ id +'">' + name + ' x ' + qty + '<span class="delete-gwp" data-id="'+ id +'" onclick="removeGwp(' + id+ ', '+ gwpType +');">&times;</span></p>';
        
   	if (type == 'new') {
       	document.querySelector('.gwp-selected').innerHTML += html;
    } else {
      	html = name + ' x ' + qty + '<span class="delete-gwp" data-id="'+ id +'" onclick="removeGwp(' + id+ ', '+ gwpType +');">&times;</span></p>';
		document.querySelector('.selected-gwp-data[data-id="' + id + '"]').innerHTML = html;
    }
}  
  
function selectGwp(selectElem) {
  	selectElem = selectElem.currentTarget;
	var gwp_limit = parseInt(sessionStorage.getItem('limit')), gwp_id = selectElem.getAttribute('data-id'), gwp_name = selectElem.getAttribute('data-name'), gwp_type = selectElem.getAttribute('data-type');
  
  	gwp_limit -= 1;
    
  	sessionStorage.setItem('limit', gwp_limit);
    document.querySelector('.limit-text').innerHTML = gwp_limit;
      
    if (sessionStorage.getItem(gwp_id) == null) {     
    	sessionStorage.setItem(gwp_id, 1);
   		render_items(gwp_id, gwp_name, 'new', gwp_type);
    } else {          
        var current = parseInt(sessionStorage.getItem(gwp_id));
        sessionStorage.setItem(gwp_id, current+1);

        render_items(gwp_id, gwp_name, 'existing', gwp_type);
    }

  	if (gwp_limit == 0) {        	
      	document.querySelector('.select-gwp').setAttribute('disabled', true); 
       	document.querySelector('.collect-button').style.display = 'block';
       	document.querySelector('.limit-holder').innerHTML = "<small class='width-100p center margin-top-15 limit-holder'>You have selected the maximum allowed "+ limit + " freebies. <br> Please select the 'Collect' button below to redeem.</small>";
 	    return false;
    }    
}
  
function chooseGwp(selectOpt) {
  	selectOpt = selectOpt.currentTarget;
 	var gwp_id = selectOpt.options[selectOpt.selectedIndex].value, gwp_name =  selectOpt.options[selectOpt.selectedIndex].getAttribute('data-name'), gwp_type = selectOpt.options[selectOpt.selectedIndex].getAttribute('data-type'), gwp_image = selectOpt.options[selectOpt.selectedIndex].getAttribute('data-image');

    document.querySelector('.select-gwp').setAttribute('data-id', gwp_id);
    document.querySelector('.select-gwp').setAttribute('data-name', gwp_name);
    document.querySelector('.select-gwp').setAttribute('data-type', gwp_type);
      
  	document.querySelector('.gwp-image').setAttribute('data-src', gwp_image);
  	document.querySelector('.gwp-image').setAttribute('src', gwp_image);
}
  
function removeGwp(id, gwpType) {
    var qty = parseInt(sessionStorage.getItem(id)), limit = parseInt(sessionStorage.getItem('limit')), event = new Event('change');

    document.querySelector('.gwp-selected').querySelector('.selected-gwp-data[data-id="' + id + '"]').remove();

    if (document.querySelector('.gwp-selected').innerHTML == '') {
      document.querySelector('.selected-freebies').style.display = 'none';
    }
         
    document.getElementById('regular-gwp').dispatchEvent(event);
    document.querySelector('.select-gwp').disabled = false;
  
    sessionStorage.removeItem(id);
    sessionStorage.setItem('limit', limit+qty);
  
    document.querySelector('.limit-holder').innerHTML = '<small class="width-100p center margin-top-15 limit-holder">You can still select <span class="limit-text"><strong>' + sessionStorage.getItem('limit') + '</strong></span> more. </small>';
    document.querySelector('.limit-text').innerHTML = parseInt(sessionStorage.getItem('limit'));
    if (parseInt(sessionStorage.getItem('limit')) > 0) {
      document.querySelector('.collect-button').style.display = 'none';
    }
}

function showModal(curr) {
  {%- if settings.disable_modal -%}
  var n = {
        items: [{
          id: {{ settings.gwp_variant_id }},
            quantity: 1
        }]
    };
    fetch(theme.routes.cartAdd, {
        method: "POST",
        body: JSON.stringify(n),
        credentials: "same-origin",
        headers: {
            "Content-Type": "application/json"
        }
    }).then(e => e.json()).then(function(e) {
            if (422 === e.status || "bad_request" === e.status)
            ;
            else {
                var n = e;
                document.dispatchEvent(new CustomEvent("ajaxProduct:added", {
                    detail: {
                        product: n
                    }
                }))
            }
            document.dispatchEvent(new CustomEvent('cart:build'));
        }
  .bind(this))   
  {%- else -%}
  if (curr && {{ settings.gwp_automatic }} == false) {
   	document.querySelector('.gwp-subtitle strong').innerHTML = curr;
    document.querySelector('.limit-holder .limit-text').innerHTML = '<strong>' + curr + '</strong>';
  }
  document.getElementById('modal-gwp').classList.add('modal--is-active');
  document.querySelector("body").classList.add('modal-open');
  {%- endif -%}
}

function cancelGwp() {
  document.getElementById('modal-gwp').classList.remove('modal--is-active');
  document.querySelector("body").classList.remove('modal-open'); 
}  
</script>
{%- endif -%}